<!DOCTYPE html>
<html lang="en">

<head>
    <%- include("layouts/header.ejs") %>

</head>

<body>
    <div class="container">
        <div class="row mt-5" style="text-align: center;">
            <div class="col-3"></div>
            <div class="col-6">
                <h1>Register</h1>
            </div>
        </div>
        <div class="row mt-5">
            <div class="col-3"></div>
            <div class="col-6">
                <form id="form-auth" action="/api/register" method="post">
                    <div class="mb-3">
                        <label for="exampleInputEmail1" class="form-label">Username</label>
                        <input onfocus="removeValidate(event)" onblur="validateUsernamePassword(event)" name="username"
                            type="text" class="form-control" id="username" aria-describedby="emailHelp">
                        <div class="invalid-feedback">
                            Username is at least 6-20 words without special symbols
                        </div>
                    </div>
                    <div class="mb-3">
                        <label for="exampleInputPassword1" class="form-label">Password</label>
                        <input onfocus="removeValidate(event)" onblur="validateUsernamePassword(event)" name="password"
                            type="password" class="form-control" id="password">
                        <div class="invalid-feedback">
                            Password includes at least: 8 words, 1 UPPERCASE, 1 lowercase, 1 special symbol (!@#$?%^&*-)
                        </div>
                    </div>

                    <div style="text-align: center;">
                        <button onclick="handleSubmit(event)" type="submit" class="btn btn-primary">Apply</button>
                    </div>

                </form>
            </div>
        </div>

    </div>


    <%- include("layouts/b5script.ejs") %>

        <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

        <script>
            let form = document.querySelector('#form-auth');
            let username = form.querySelector('#username');
            let password = form.querySelector('#password');

            let handleSubmit = async (event) => {
                event.preventDefault();

                let resultValidateUsername = await checkUsername(username.value);
                let resultValidatePassword = await checkPassword(password.value);

                if (resultValidateUsername === 'is-valid' && resultValidatePassword === 'is-valid') {
                    axios({
                        method: form.method,
                        url: form.action,
                        data: {
                            username: username.value,
                            password: password.value,
                        }
                    }).then(result => {
                        if (result.data.message) {
                            Swal.fire({
                                position: 'center',
                                icon: 'success',
                                title: 'Register success',
                                showConfirmButton: false,
                                timer: 1500
                            }).then((result) => {
                            window.location.replace(
                                `http://${window.location.hostname}:${window.location.port}/auth/login`
                            )
                        })
                }
            }).catch (err => {
                Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text: 'Username is exist, please try again',
                    // footer: '<a href="">Why do I have this issue?</a>'
                })
            })
                } else {
                validateUsernamePassword(event);
            }
            }

            let checkUsername = (username) => {
                return new Promise((resolve, reject) => {
                    let regexp = new RegExp(/\w{6,20}$/);
                    let validate = regexp.test(username);
                    if (validate) {
                        resolve('is-valid');
                    } else {
                        resolve('is-invalid');
                    }
                })
            }

            let checkPassword = (password) => {
                return new Promise((resolve, reject) => {
                    let regexp = new RegExp(/^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-1])(?=.*[!@#$%^?&*-])[a-zA-Z\d!@#$?%^&*-].{8,}$/);
                    let validate = regexp.test(password);
                    if (validate) {
                        resolve('is-valid');
                    } else {
                        resolve('is-invalid');
                    }
                })
            }

            let validateUsernamePassword = async (event) => {
                let obj = event.target.value;
                if (event.target.id === 'username') {
                    let result = await checkUsername(obj);
                    if (result === 'is-valid') {
                        document.querySelector('#username').className = 'is-valid form-control';
                    } else {
                        document.querySelector('#username').className = 'is-invalid form-control';
                    }
                } else {
                    let result = await checkPassword(obj);
                    if (result === 'is-valid') {
                        document.querySelector('#password').className = 'is-valid form-control';
                    } else {
                        document.querySelector('#password').className = 'is-invalid form-control';
                    }
                }
            }

            let removeValidate = (event) => {
                event.target.className = 'form-control';
            }



        </script>

</body>

</html>